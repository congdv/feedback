generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  post                Post[]
  comment             Comment[]
  commentReaction     CommentReaction[]
  postReaction        PostReaction[]
  organizations       Organization[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Status {
  id          String @id @default(cuid())
  slug        String @unique
  description String
  posts       Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id          String @id @default(cuid())
  slug        String @unique
  description String
  posts       Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id             String @id @default(cuid())
  title          String
  content        String
  userId         String
  tagId          String?
  statusId       String?
  comments       Comment[]
  postReaction   PostReaction[]
  organizationId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tag      Tag?      @relation(fields: [tagId], references: [id])
  status   Status?   @relation(fields: [statusId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Comment {
  id               String  @id @default(cuid())
  content          String
  postId           String
  userId           String
  parentId         String?
  commentReaction  CommentReaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent   Comment?  @relation("Comments", fields: [parentId], references: [id], onDelete: Cascade)
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  children Comment[] @relation("Comments")
}


model CommentReaction {
  id           String @id @default(cuid())
  userId       String
  commentId    String
  upvoteAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment      Comment   @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}


model PostReaction {
  id       String @id @default(cuid())
  postId   String
  userId   String
  upvoteAt DateTime @default(now())

  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model Organization {
  id               String @id @default(cuid())
  slug             String
  createdByUserId  String
  posts            Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User      @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  
   @@unique([slug])
}